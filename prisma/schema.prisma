generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "multiSchema"]
  binaryTargets   = ["native", "darwin"]

}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
  schemas           = ["edu"]
}
// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  Purchases Purchase[]

  createdAt   DateTime     @default(now())
  updateAt    DateTime     @updatedAt()

  @@schema("edu")


  @@index([categoryId])
  // @@fulltext([title])

}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]

  @@schema("edu")

}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])

  @@schema("edu")

}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  videoType   String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])

  @@schema("edu")

}

model MuxData {
    id String @id @default(uuid())
    assetId String
    playbackId String

    chapterId String @unique
    chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@schema("edu")

}

model UserProgress {
  id String @id @default(uuid())
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])

  @@schema("edu")


}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([courseId])
   @@unique([userId, courseId])

  @@schema("edu")

}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("edu")


}